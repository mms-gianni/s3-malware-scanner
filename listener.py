#!/usr/bin/env python
import pyclamd
import boto3
import pprint
import argparse
import os
import logging as log
from sqs_listener import SqsListener
'''
{'Records': [{'awsRegion': 'eu-central-1',
              'eventName': 'ObjectCreated:Put',
              'eventSource': 'aws:s3',
              'eventTime': '2021-01-12T17:04:35.754Z',
              'eventVersion': '2.1',
              'requestParameters': {'sourceIPAddress': '178.82.116.172'},
              'responseElements': {'x-amz-id-2': 'kxOGvRO+g63spAXJN7hw/6GkyWLz5wj/MgrIJ5cekJl69tnfznafHjRJS8WyDfC5MfeN1PwQ+ubLU+5k73SZz6iRXOkXGK8Q',
                                   'x-amz-request-id': '025EDCC7A7500C73'},
              's3': {'bucket': {'arn': 'arn:aws:s3:::srf-formio-upload-test',
                                'name': 'srf-formio-upload-test',
                                'ownerIdentity': {'principalId': 'A39MD9YF73ZQTF'}},
                     'configurationId': 'itemuploadEvent',
                     'object': {'eTag': '6ce6f415d8475545be5ba114f208b0ff',
                                'key': 'eicar_com.zip',
                                'sequencer': '005FFDD6A86DD90914',
                                'size': 184},
                     's3SchemaVersion': '1.0'},
              'userIdentity': {'principalId': 'AWS:AROAVVMCWGPXDDGRYZNTE:adm-carafagi@srf.ch'}}]}
'''
class MyListener(SqsListener):
    def handle_message(self, body, attributes, messages_attributes):
        if "Records" in body:
            for record in body["Records"]:
                bucketname = record['s3']['bucket']['name']
                object_key = record['s3']['object']['key'].replace("+", " ")
                sourceIPAddress = record['requestParameters']['sourceIPAddress']
                eventTime = record['eventTime']
                log.info("Submitted File to Scanner: {bucketname} {object_key}".format(bucketname=bucketname, object_key=object_key))
                log.info("File: {sourceIPAddress} {eventTime}".format(sourceIPAddress=sourceIPAddress, eventTime=eventTime))
                self.__file_check(bucketname, object_key)
        
        log.debug(pprint.pformat(body, indent=4))

    def __file_check(self, bucketname, object_key):

        s3_res = boto3.resource('s3')
        obj = s3_res.Object(bucketname, object_key)
        data = obj.get()

        log.info("Scanning: {type} {length} {key}".format(key=object_key, type=data['ContentType'], length=data['ContentLength']))

        clamd = pyclamd.ClamdNetworkSocket(host=args.clamd_host, port=int(args.clamd_port), timeout=None)
        result = clamd.scan_stream(data['Body'].read())
        if result != None:
            print("\x1b[31;21mMalware found: {type} {length} {key} {malware}\x1b[0m".format(
                key=object_key,
                type=data['ContentType'],
                length=data['ContentLength'],
                malware=result['stream'][1]
            ))
        else:
            log.info("OK: File {key} is OK".format(key=object_key))

def __listener():
    listener = MyListener(args.aws_sqs_queue, error_queue='my-error-queue', region_name=args.aws_region, interval=5)
    try:
        print('started listening {queue} {region}'.format(queue=args.aws_sqs_queue, region=args.aws_region))
        listener.listen()
    except KeyboardInterrupt:
        print('finised listening')

if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument("-v", "--verbose", action='store_true', required=False, help="increase output verbosity")
    parser.add_argument("-vv", "--veryverbose", action='store_true', required=False, help="increase output verbosity")
    parser.add_argument("-q", "--aws_sqs_queue", required=True, help="AWS SQM name")
    parser.add_argument("-r", "--aws_region", default=os.environ.get('AWS_REGION', 'eu-central-1'), required=False, help="AWS SQM name")
    parser.add_argument("-c", "--clamd_host", default=os.environ.get('CLAMD_HOST', '127.0.0.1'), required=False, help="Host or IP of clamd Server")
    parser.add_argument("-p", "--clamd_port", default=os.environ.get('CLAMD_PORT', '3310'), required=False, help="Port of clamd Server")

    args = parser.parse_args()

    if args.verbose:
        log.basicConfig(format='%(levelname)s:%(message)s', level=log.INFO)

    if args.veryverbose:
        log.basicConfig(format='%(levelname)s:%(message)s', level=log.DEBUG)

    log.info("Clamd Host: {}:{}".format(args.clamd_host, args.clamd_port))

    __listener()