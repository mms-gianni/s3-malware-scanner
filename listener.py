#!/usr/bin/env python
import pyclamd
import boto3
import pprint
import argparse
import os
import logging as log
from sqs_listener import SqsListener

class MyListener(SqsListener):
    def handle_message(self, body, attributes, messages_attributes):
        __file_check(body['Bucket'], body['Key']) 

def __file_check(bucketname, object_key):
    sema.acquire()

    s3_res = boto3.resource('s3')
    obj = s3_res.Object(bucketname, object_key)
    data = obj.get()

    log.info("Scanning: {type} {length} {key}".format(key=object_key, type=data['ContentType'], length=data['ContentLength']))

    clamd = pyclamd.ClamdNetworkSocket(host=args.clamd_host, port=int(args.clamd_port), timeout=None)
    result = clamd.scan_stream(data['Body'].read())
    if result != None:
        print("\x1b[31;21mMalware found: {type} {length} {key} {malware}\x1b[0m".format(
            key=object_key, 
            type=data['ContentType'], 
            length=data['ContentLength'],
            malware=result['stream'][1]
        ))
    
    sema.release()

def __listener():
    listener = MyListener('s3malwareScanner', error_queue='my-error-queue', region_name='us-east-1')
    listener.listen()
    print('finised listening')

if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument("-v", "--verbose", action='store_true', required=False, help="increase output verbosity")
    parser.add_argument("-vv", "--veryverbose", action='store_true', required=False, help="increase output verbosity")
    parser.add_argument("-q", "--aws_sqm_queue", required=True, help="AWS SQM name")
    parser.add_argument("-c", "--clamd_host", default=os.environ.get('CLAMD_HOST', '127.0.0.1'), required=False, help="Host or IP of clamd Server")
    parser.add_argument("-p", "--clamd_port", default=os.environ.get('CLAMD_PORT', '3310'), required=False, help="Port of clamd Server")

    args = parser.parse_args()

    if args.verbose:
        log.basicConfig(format='%(levelname)s:%(message)s', level=log.INFO)

    if args.veryverbose:
        log.basicConfig(format='%(levelname)s:%(message)s', level=log.DEBUG)

    log.info("Clamd Host: {}:{}".format(args.clamd_host, args.clamd_port))

    __listener()