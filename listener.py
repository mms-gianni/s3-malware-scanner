#!/usr/bin/env python
import boto3
import pprint
import argparse
import os
import logging as log
from sqs_listener import SqsListener
from scanner import Scanner

class MyListener(SqsListener):
    def handle_message(self, body, attributes, messages_attributes):
        if "Records" in body:
            scanner = Scanner(args.clamd_host, args.clamd_port, args.tagging, {'clean': args.tag_clean, 'infected': args.tag_infected})
            for record in body["Records"]:
                bucketname = record['s3']['bucket']['name']
                object_key = record['s3']['object']['key'].replace("+", " ")
                sourceIPAddress = record['requestParameters']['sourceIPAddress']
                eventTime = record['eventTime']
                log.info("Submitted File to Scanner: {bucketname} {object_key}".format(bucketname=bucketname, object_key=object_key))
                log.info("File: {sourceIPAddress} {eventTime}".format(sourceIPAddress=sourceIPAddress, eventTime=eventTime))
                scanner.file_check(bucketname, object_key)
        
        log.debug(pprint.pformat(body, indent=4))

def _listener():
    listener = MyListener(args.aws_sqs_queue, error_queue='my-error-queue', region_name=args.aws_region, interval=5)
    try:
        print('started listening {queue} {region}'.format(queue=args.aws_sqs_queue, region=args.aws_region))
        listener.listen()
    except KeyboardInterrupt:
        print('finised listening')

if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument("-v", "--verbose", action='store_true', required=False, help="increase output verbosity")
    parser.add_argument("-vv", "--veryverbose", action='store_true', required=False, help="increase output verbosity")
    parser.add_argument("-q", "--aws_sqs_queue", default=os.environ.get('AWS_SQS_QUEUE'), required=False, help="AWS SQS name")
    parser.add_argument("-r", "--aws_region", default=os.environ.get('AWS_REGION', 'eu-central-1'), required=False, help="AWS Region")
    parser.add_argument("-c", "--clamd_host", default=os.environ.get('CLAMD_HOST', '127.0.0.1'), required=False, help="Host or IP of clamd Server")
    parser.add_argument("-p", "--clamd_port", default=os.environ.get('CLAMD_PORT', '3310'), required=False, help="Port of clamd Server")
    parser.add_argument("-t", "--tagging", default=os.environ.get('TAGGING', 'False'), required=False, help="Enable tagging")
    parser.add_argument("-tc", "--tag_clean", default=os.environ.get('TAG_CLEAN', 'clean'), required=False, help="Tag to be set when CLEAN")
    parser.add_argument("-ti", "--tag_infected", default=os.environ.get('TAG_INFECTED', 'infected'), required=False, help="Tag to be set when INFECTD")

    args = parser.parse_args()

    if args.verbose:
        log.basicConfig(format='%(levelname)s:%(message)s', level=log.INFO)

    if args.veryverbose:
        log.basicConfig(format='%(levelname)s:%(message)s', level=log.DEBUG)

    log.info("Clamd Host: {}:{}".format(args.clamd_host, args.clamd_port))

    _listener()