#!/usr/bin/env python
import pyclamd
import boto3
import pprint
import sys
import argparse
import logging as log
import os

def scan(bucketname):

    s3 = boto3.client("s3")
    all_objects = s3.list_objects(Bucket = bucketname) 

    for s3file in all_objects['Contents']:
        
        log.info("Scanning: {}".format(s3file['Key']))

        s3_res = boto3.resource('s3')
        obj = s3_res.Object(bucketname, s3file['Key'])
        
        result = clamd.scan_stream(obj.get()['Body'].read())
        if result != None:
            pprint.pprint(result)

if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument("-v", "--verbose", action='store_true', required=False, help="increase output verbosity")
    parser.add_argument("-vv", "--veryverbose", action='store_true', required=False, help="increase output verbosity")
    parser.add_argument("-b", "--aws_bucket", required=True, help="Bucket name")
    parser.add_argument("-c", "--clamd_host", default=os.environ.get('CLAMD_HOST', '127.0.0.1'), required=False, help="Host or IP of clamd Server")
    parser.add_argument("-p", "--clamd_port", default=os.environ.get('CLAMD_PORT', '3310'), required=False, help="Port of clamd Server")

    args = parser.parse_args()

    if args.verbose:
        log.basicConfig(format='%(levelname)s:%(message)s', level=log.INFO)

    if args.veryverbose:
        log.basicConfig(format='%(levelname)s:%(message)s', level=log.DEBUG)


    log.info("Clamd Host: {}:{}".format(args.clamd_host, args.clamd_port))
    clamd = pyclamd.ClamdNetworkSocket(host=args.clamd_host, port=int(args.clamd_port), timeout=None)
    
    try:
        scan(args.aws_bucket)
    except KeyboardInterrupt:
        print('EXIT: User aborted scan')
    
    sys.exit()